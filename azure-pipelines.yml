# Adapted from https://nbsoftsolutions.com/blog/azure-pipelines-for-rust-projects

pr:
  - master
  - releases/*

stages:
  - stage: build_platforms
    jobs:
      - job: matrix
        strategy:
          matrix:
            linux:
              imageName: "ubuntu-latest"
              target: 'x86_64-unknown-linux-gnu'
              rustup_toolchain: stable
            mac:
              imageName: "macos-latest"
              target: 'x86_64-apple-darwin'
              rustup_toolchain: stable
            windows:
              imageName: "windows-latest"
              target: 'x86_64-pc-windows-msvc'
              rustup_toolchain: stable
          maxParallel: 3
        pool:
          vmImage: $(imageName)
        timeoutInMinutes: 5
        steps:
          - script: |
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
            displayName: Install rust
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
          - script: |
              curl -sSf -o rustup-init.exe https://win.rustup.rs
              rustup-init.exe -y --default-host %target% --default-toolchain %RUSTUP_TOOLCHAIN%
              echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
            displayName: Windows install rust
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
          - script: cargo build --all
            displayName: Cargo build
  - stage: qualify
    jobs:
      - job: Test
        pool:
          vmImage: 'ubuntu-latest'
        container: 'rust:latest'
        timeoutInMinutes: 5
        steps:
          - script: cargo build --all
            displayName: Cargo build
          - script: cargo test --all
            displayName: Cargo test
      - job: Clippy
        pool:
          vmImage: 'ubuntu-latest'
        container: 'rust:latest'
        steps:
          - script: rustup component add clippy
            displayName: Install Clippy
          - script: cargo clippy --all
            displayName: Run clippy
      - job: Fmt
        pool:
          vmImage: 'ubuntu-latest'
        container: 'rust:latest'
        condition: in(variables['Build.Reason'], 'BatchedCI', 'IndividualCI', 'Manual', 'PullRequest')
        steps:
          - script: rustup component add rustfmt
            displayName: Install Rustfmt
          - script: cargo fmt --all -- --check
            displayName: Run Rustfmt
  - stage: release
    jobs:
      - job: Noop
        pool:
          vmImage: 'ubuntu-latest'
        container: 'rust:latest'
        timeoutInMinutes: 2
        steps:
          - script: echo "TBD"
